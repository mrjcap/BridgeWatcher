name: PowerShell Module Publish

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout the repository
      - uses: actions/checkout@v3

      # 2. Install Pester for testing
      - name: Install Pester
        shell: pwsh
        run: Install-Module Pester -Force -Scope CurrentUser
          
      # 3. Run Pester Tests
      - name: Run Tests
        shell: pwsh
        run: |
          $res = Invoke-Pester -Configuration (Import-PowerShellDataFile .\Tests\PesterConfiguration.psd1) -Verbose
          if ($res.FailedCount -gt 0) { exit 1 }

      # 4. Bump the version automatically
      - name: Bump Version
        shell: pwsh
        id: version_bump  # Αποθήκευση του output για χρήση αργότερα
        run: |
          # Get the current version from the .psd1 file
          $psd1Path = './BridgeWatcher/BridgeWatcher.psd1'
          $content = Get-Content $psd1Path -Raw

          # Extract current version using regex
          if ($content -match "ModuleVersion\s*=\s*'(\d+\.\d+\.\d+)'" ) {
              $currentVersion = $matches[1]
              Write-Host "Current version: $currentVersion"

              # Increment the version number (patch bump)
              $versionParts = $currentVersion -split '\.'
              $versionParts[2] = [int]$versionParts[2] + 1  # Bumping the patch version
              $newVersion = "$($versionParts[0]).$($versionParts[1]).$($versionParts[2])"

              # Update the ModuleVersion in the .psd1 file
              $newContent = $content -replace "ModuleVersion\s*=\s*'$currentVersion'", "ModuleVersion = '$newVersion'"
              Set-Content $psd1Path -Value $newContent
              Write-Host "Updated version to: $newVersion"

              # Export the new version to the environment
              echo "new_version=$newVersion" | Out-File -FilePath $env:GITHUB_ENV -Append
          } else {
              Write-Host "Could not find version in .psd1 file."
              exit 1
          }

      # 5. Generate Changelog dynamically
      - name: Generate Release Notes
        id: generate_changelog
        run: |
          # Use git log to generate release notes from commit messages
          git log --pretty=format:"* %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD > temp_changelog.txt
          echo "release_notes=$(cat temp_changelog.txt)" >> $GITHUB_ENV

      # 6. Commit the updated files
      - name: Commit Version
        shell: bash
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add ./BridgeWatcher/BridgeWatcher.psd1
          git commit -m "Bump version to ${{ env.new_version }}"
          git push origin main

      # 7. Create a new tag for the release
      - name: Create Tag
        run: |
          TAG_NAME="v${{ env.new_version }}"  # Χρήση της αυξημένης έκδοσης για το tag
          git tag $TAG_NAME  # Create the tag
          git push origin $TAG_NAME  # Push the tag to the repository

      # 8. Create GitHub Release with Release Notes
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ env.release_notes }}  # Χρησιμοποιεί το changelog από το git log
          tag_name: "v${{ env.new_version }}"  # Χρήση της αυξημένης έκδοσης για το release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 9. Publish to PowerShell Gallery
      - name: Publish Module
        if: ${{ github.event_name == 'push' }}
        shell: pwsh
        env:
          PSGalleryApiKey: ${{ secrets.PSGalleryApiKey }}
        run: |
          Publish-Module -Path ./BridgeWatcher -Repository PSGallery -NuGetApiKey $env:PSGalleryApiKey -Verbose