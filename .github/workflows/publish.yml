name: PowerShell Module Publish

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'CHANGELOG.md'
      - 'LICENSE'
      - '.github/workflows/publish.yml'
      - '/tools/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'CHANGELOG.md'
      - 'LICENSE'
      - '.github/workflows/publish.yml'
      - '/tools/**'

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch all tags
        run: git fetch --tags

      - name: Install Pester
        shell: pwsh
        run: Install-Module Pester -Force -Scope CurrentUser

      - name: Run Tests
        shell: pwsh
        run: |
          Invoke-Pester -Configuration (Import-PowerShellDataFile .\Tests\PesterConfiguration.psd1)

      # Step 1: Check for new commits since last release
      - name: Check for new commits since last release
        id: commit_check
        shell: pwsh
        run: |
          $commits = & ./scripts/Get-GitCommitsSinceLastRelease.ps1
          if (-not $commits -or $commits.Count -eq 0) {
            Write-Host "No new commits since last release."
            "$false" | Set-Content has_new_commits.flag
          } else {
            Write-Host "Found $($commits.Count) new commits since last release."
            "$true" | Set-Content has_new_commits.flag
          }

      # Step 2: Read flag to set output for conditional steps
      - name: Read commits flag
        id: has_commits
        shell: bash
        run: |
          if [[ -f has_new_commits.flag ]] && grep -q true has_new_commits.flag; then
            echo "has_commits=true" >> $GITHUB_OUTPUT
          else
            echo "has_commits=false" >> $GITHUB_OUTPUT
          fi

      # Step 3: Version bump only if there are new commits
      - name: Bump Version
        if: steps.has_commits.outputs.has_commits == 'true'
        shell: pwsh
        id: version_bump
        run: |
          $psd1Path = './BridgeWatcher/BridgeWatcher.psd1'
          & ./scripts/Update-ModuleVersion.ps1 -Path $psd1Path -GitHubEnv $env:GITHUB_ENV

      # Step 4: Update CHANGELOG.md only if there are new commits
      - name: Update CHANGELOG.md
        if: steps.has_commits.outputs.has_commits == 'true'
        shell: pwsh
        run: |
          & ./scripts/Update-ReleaseChangeLog.ps1 -Version "${{ env.new_version }}"

      # Step 5: Commit only if there are new commits
      - name: Commit Version and Changelog
        if: steps.has_commits.outputs.has_commits == 'true'
        id: commit_step
        shell: bash
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add ./BridgeWatcher/BridgeWatcher.psd1 CHANGELOG.md
          if git diff --staged --quiet; then
            echo "No changes to commit from version bump or changelog update."
            echo "committed=false" >> $GITHUB_OUTPUT
          else
            git commit -m "Bump version to ${{ env.new_version }} and update CHANGELOG.md" -m "[skip ci]"
            echo "committed=true" >> $GITHUB_OUTPUT
          fi

      - name: Pull and rebase before push
        if: steps.has_commits.outputs.has_commits == 'true' && steps.commit_step.outputs.committed == 'true'
        run: git pull --rebase origin main

      - name: Push changes
        if: steps.has_commits.outputs.has_commits == 'true' && steps.commit_step.outputs.committed == 'true'
        run: git push origin main

      - name: Create Tag
        if: steps.has_commits.outputs.has_commits == 'true' && steps.commit_step.outputs.committed == 'true'
        run: |
          TAG_NAME="v${{ env.new_version }}"
          git tag $TAG_NAME
          git push origin $TAG_NAME

      - name: Extract release notes from CHANGELOG.md
        if: steps.has_commits.outputs.has_commits == 'true' && steps.commit_step.outputs.committed == 'true'
        id: changelog_notes
        shell: pwsh
        run: |
          $notes = & ./scripts/Get-ReleaseNotes.ps1 -Version "v${{ env.new_version }}"
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$notes" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.has_commits.outputs.has_commits == 'true' && steps.commit_step.outputs.committed == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ env.new_version }}"
          name: "Release v${{ env.new_version }}"
          body: ${{ steps.changelog_notes.outputs.release_notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Module
        if: steps.has_commits.outputs.has_commits == 'true' && steps.commit_step.outputs.committed == 'true'
        shell: pwsh
        env:
          PSGalleryApiKey: ${{ secrets.PSGalleryApiKey }}
        run: |
          if (!$env:PSGalleryApiKey) {
            Write-Error "PSGalleryApiKey is not set. Ensure it is added as a GitHub Secret."
            exit 1
          }
          if (-Not (Test-Path -Path ./BridgeWatcher)) {
            Write-Error "Module path ./BridgeWatcher does not exist. Check the workflow configuration."
            exit 1
          }
          try {
            Publish-Module -Path ./BridgeWatcher -Repository PSGallery -NuGetApiKey $env:PSGalleryApiKey -Verbose
          } catch {
            Write-Error "Failed to publish the module: $_"
            exit 1
          }

      # Cleanup flag files so subsequent runs start fresh
      - name: Cleanup flag files
        if: always()
        run: rm -f has_new_commits.flag
