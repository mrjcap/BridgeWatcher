name: PowerShell Module Publish

# semgrep:ignore yaml.github-actions.security.curl-eval.curl-eval
on:
  workflow_call:
    inputs:
      next_version:
        description: 'The version to publish'
        required: true
        type: string
      dry_run:
        description: 'Perform a dry run without actually publishing'
        required: false
        type: boolean
        default: false
    outputs:
      module_published:
        description: 'Whether the module was successfully published'
        value: ${{ jobs.publish.outputs.module_published }}
      published_version:
        description: 'The version that was published'
        value: ${{ jobs.publish.outputs.published_version }}

permissions:
  contents: write
  pull-requests: read

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  pre-publish-validation:
    name: Pre-publish Validation
    runs-on: ubuntu-latest
    outputs:
      validation_passed: ${{ steps.validate.outputs.validation_passed }}
      module_name: ${{ steps.validate.outputs.module_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set module version before validation
        # nosemgrep: yaml.github-actions.security.curl-eval.curl-eval
        shell: pwsh
        env:
          NEXT_VERSION: ${{ inputs.next_version }}
        run: |
          Write-Verbose "Setting module version to $env:NEXT_VERSION before validation..."
          if (Test-Path "./scripts/Update-ModuleVersion.ps1") {
            & ./scripts/Update-ModuleVersion.ps1 -Version $env:NEXT_VERSION -Path './BridgeWatcher/BridgeWatcher.psd1' -Verbose
          } else {
            Write-Error "Update-ModuleVersion.ps1 script not found!"
            exit 1
          }
      - name: Validate module before publish
        id: validate
        shell: pwsh
        run: |
          Write-Verbose "Validating module before publish..."

          # Find module manifest
          $manifestPath = Get-ChildItem -Path . -Filter "*.psd1" -Recurse |
            Where-Object { $_.Directory.Name -notmatch 'Tests|\.git|config' } |
            Select-Object -First 1

          if (-not $manifestPath) {
            Write-Error "Module manifest (.psd1) not found!"
            exit 1
          }

          try {
            # Test module manifest
            $manifest = Test-ModuleManifest -Path $manifestPath.FullName -ErrorAction Stop
            Write-Verbose " Module manifest is valid: $($manifest.Name) v$($manifest.Version)"

            # Validate version matches input
            if ($manifest.Version -ne '${{ inputs.next_version }}') {
              Write-Error " Module version ($($manifest.Version)) doesn't match expected version (${{ inputs.next_version }})"
              exit 1
            }

            # Check required fields
            $requiredFields = @('Author', 'Description', 'PowerShellVersion')
            foreach ($field in $requiredFields) {
              if (-not $manifest.$field) {
                Write-Error " Required field '$field' is missing from manifest"
                exit 1
              }
            }

            # Validate functions exist
            if ($manifest.FunctionsToExport -and $manifest.FunctionsToExport -ne '*') {
              $moduleDir = $manifestPath.Directory.FullName
              $publicFunctions = Get-ChildItem "$moduleDir\Public\*.ps1" -ErrorAction SilentlyContinue

              if ($publicFunctions) {
                Write-Verbose "Found $($publicFunctions.Count) public functions"
              } else {
                Write-Warning "No public functions found, but FunctionsToExport is specified"
              }
            }

            # Set outputs
            echo "validation_passed=true" >> $env:GITHUB_OUTPUT
            echo "module_name=$($manifest.Name)" >> $env:GITHUB_OUTPUT

            Write-Verbose " Pre-publish validation passed"

          } catch {
            Write-Error " Module validation failed: $($_.Exception.Message)"
            echo "validation_passed=false" >> $env:GITHUB_OUTPUT
            exit 1
          }

  publish:
    name: Publish to PowerShell Gallery
    runs-on: ubuntu-latest
    needs: pre-publish-validation
    if: needs.pre-publish-validation.outputs.validation_passed == 'true'
    outputs:
      module_published: ${{ steps.set_output.outputs.published }}
      published_version: ${{ steps.set_output.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set final module version
        shell: pwsh
        env:
          NEXT_VERSION: ${{ inputs.next_version }}
        run: |
          Write-Verbose "Setting final module version to $env:NEXT_VERSION"

          if (Test-Path "./scripts/Update-ModuleVersion.ps1") {
            & ./scripts/Update-ModuleVersion.ps1 `
              -Version $env:NEXT_VERSION `
              -Path './BridgeWatcher/BridgeWatcher.psd1' `
              -Verbose
          } else {
            Write-Error "Update-ModuleVersion.ps1 script not found!"
            exit 1
          }

      - name: Configure Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Commit version update
        env:
          NEXT_VERSION: ${{ inputs.next_version }}
        run: |
          git add BridgeWatcher/BridgeWatcher.psd1
          git commit -m "chore: bump version to $NEXT_VERSION [skip ci]" || echo "No changes to commit"

      - name: Push changes
        env:
          REF_NAME: ${{ github.ref_name }}
        run: |
          git pull --rebase origin "$REF_NAME"
          git push origin "HEAD:$REF_NAME"

      - name: Extract release notes
        id: release_notes
        shell: pwsh
        env:
          NEXT_VERSION: ${{ inputs.next_version }}
        run: |
          Write-Verbose "Extracting release notes for version $env:NEXT_VERSION"

          if (Test-Path "./scripts/Get-ReleaseNotes.ps1") {
            try {
              $notes = & ./scripts/Get-ReleaseNotes.ps1 -Version "v$env:NEXT_VERSION" -ErrorAction Stop
              if ($notes) {
                # Escape special characters for GitHub output
                $escapedNotes = $notes -replace '%', '%25' -replace '\n', '%0A' -replace '\r', '%0D'
                echo "notes=$escapedNotes" >> $env:GITHUB_OUTPUT
                Write-Verbose " Release notes extracted successfully"
              } else {
                echo "notes=Release $env:NEXT_VERSION" >> $env:GITHUB_OUTPUT
                Write-Verbose " No release notes found, using default"
              }
            } catch {
              Write-Verbose " Failed to extract release notes: $($_.Exception.Message)"
              echo "notes=Release $env:NEXT_VERSION" >> $env:GITHUB_OUTPUT
            }
          } else {
            Write-Verbose " Get-ReleaseNotes.ps1 not found, using default notes"
            echo "notes=Release $env:NEXT_VERSION" >> $env:GITHUB_OUTPUT
          }

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631
        with:
          tag_name: v${{ inputs.next_version }}
          name: Release v${{ inputs.next_version }}
          body: ${{ steps.release_notes.outputs.notes }}
          draft: ${{ inputs.dry_run }}
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if version already exists on PSGallery
        id: version_check
        shell: pwsh
        env:
          NEXT_VERSION: ${{ inputs.next_version }}
        run: |
          Write-Verbose "Checking if module v$env:NEXT_VERSION is already in PSGallery…"
          $existing = Find-Module -Name '${{ needs.pre-publish-validation.outputs.module_name }}' -RequiredVersion $env:NEXT_VERSION -Repository PSGallery -ErrorAction SilentlyContinue
          if ($existing) {
            Write-Host "Module v$env:NEXT_VERSION already exists. Skipping publish."
            echo "exists=true" >> $env:GITHUB_OUTPUT
          } else {
            echo "exists=false" >> $env:GITHUB_OUTPUT
          }
      - name: Publish module to PowerShell Gallery
        if: steps.version_check.outputs.exists == 'false'
        shell: pwsh
        run: |
          Write-Verbose "Publishing module to PowerShell Gallery..."

          if ('${{ inputs.dry_run }}' -eq 'true') {
            Write-Verbose " DRY RUN MODE - Skipping actual publish"

            # Validate the module would be publishable
            try {
              $publishSplat = @{
                Path           = './BridgeWatcher'
                NuGetApiKey    = '${{ secrets.PSGALLERYAPIKEY }}'
                WhatIf         = $true
                Repository     = 'PSGallery'
                Verbose        = $true
                ErrorAction    = 'Stop'
              }
              Publish-Module @publishSplat
              Write-Verbose " Module validation for publish passed"
            } catch {
              Write-Error " Module would fail to publish: $_"
              exit 1
            }
          } else {
            # Actual publish
            try {
              $publishSplat = @{
                Path           = './BridgeWatcher'
                NuGetApiKey    = '${{ secrets.PSGALLERYAPIKEY }}'
                Repository     = 'PSGallery'
                Verbose        = $true
                ErrorAction    = 'Stop'
                Force          = $true
              }
              Publish-Module @publishSplat
              Write-Verbose " Module published successfully to PowerShell Gallery"
            } catch {
              Write-Error " Failed to publish module: $_"

              # Try to delete the release if publish failed
              if ('${{ steps.create_release.outputs.id }}') {
                Write-Verbose "Attempting to clean up failed release..."
                try {
                  gh release delete "v${{ inputs.next_version }}" --yes 2>/dev/null || true
                  git tag -d "v${{ inputs.next_version }}" 2>/dev/null || true
                  git push origin --delete "v${{ inputs.next_version }}" 2>/dev/null || true
                } catch {
                  Write-Verbose "Could not clean up release artifacts"
                }
              }
              exit 1
            }
          }

      - name: Verify module publication
        if: inputs.dry_run == false
        shell: pwsh
        run: |
          Write-Verbose "Verifying module publication..."

          # Wait a bit for the gallery to update
          Start-Sleep -Seconds 30

          $maxAttempts = 6
          $attempt = 1
          $found = $false

          do {
            try {
              Write-Verbose "Attempt $attempt of $maxAttempts to find published module..."
              $module = Find-Module -Name '${{ needs.pre-publish-validation.outputs.module_name }}' -RequiredVersion '${{ inputs.next_version }}' -Repository PSGallery -ErrorAction Stop

              if ($module) {
                Write-Verbose " Module successfully found in PowerShell Gallery"
                Write-Verbose "   Name: $($module.Name)"
                Write-Verbose "   Version: $($module.Version)"
                Write-Verbose "   Published: $($module.PublishedDate)"
                $found = $true
                break
              }
            } catch {
              Write-Verbose "⏳ Module not yet available, waiting... (Attempt $attempt)"
              Start-Sleep -Seconds 30
              $attempt++
            }
          } while ($attempt -le $maxAttempts -and -not $found)

          if (-not $found) {
            Write-Error " Module verification failed - not found in PowerShell Gallery after $maxAttempts attempts"
            exit 1
          }

      - name: Cleanup Git repository
        run: |
          git gc --prune=now --aggressive

      - name: Set job outputs
        id: set_output
        run: |
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "published=dry-run" >> $GITHUB_OUTPUT
          else
            echo "published=true" >> $GITHUB_OUTPUT
          fi
          echo "version=${{ inputs.next_version }}" >> $GITHUB_OUTPUT

      - name: Job summary
        if: always()
        shell: pwsh
        run: |
          Write-Verbose "� Publish Summary"
          Write-Verbose "=================="
          Write-Verbose "Module: ${{ needs.pre-publish-validation.outputs.module_name }}"
          Write-Verbose "Version: ${{ inputs.next_version }}"
          Write-Verbose "Dry Run: ${{ inputs.dry_run }}"
          Write-Verbose "Published: ${{ steps.set_output.outputs.published }}"
          Write-Verbose "Release Created: ${{ steps.create_release.outputs.url || 'N/A' }}"

      - name: Set failure output
        if: failure()
        run: |
          echo "published=false" >> $GITHUB_OUTPUT
          echo "version=" >> $GITHUB_OUTPUT
