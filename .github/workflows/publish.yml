name: PowerShell Module Publish

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'CHANGELOG.md'
      - 'LICENSE'
      - '.github/workflows/publish.yml'
      - '/tools/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'CHANGELOG.md'
      - 'LICENSE'
      - '.github/workflows/publish.yml'
      - '/tools/**'
jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install Pester
        shell: pwsh
        run: Install-Module Pester -Force -Scope CurrentUser
      - name: Run Tests
        shell: pwsh
        run: |
          $res = Invoke-Pester -Configuration (Import-PowerShellDataFile .\Tests\PesterConfiguration.psd1) -Verbose
          if ($res.FailedCount -gt 0) { exit 1 }
      - name: Bump Version
        shell: pwsh
        id: version_bump
        run: |
          $psd1Path = './BridgeWatcher/BridgeWatcher.psd1'
          $content = Get-Content $psd1Path -Raw
          if ($content -match "ModuleVersion\s*=\s*'(\d+\.\d+\.\d+)'" ) {
              $currentVersion = $matches[1]
              Write-Host "Current version: $currentVersion"
              $versionParts = $currentVersion -split '\.'
              $versionParts[2] = [int]$versionParts[2] + 1  # Bumping the patch version
              $newVersion = "$($versionParts[0]).$($versionParts[1]).$($versionParts[2])"
              $newContent = $content -replace "ModuleVersion\s*=\s*'$currentVersion'", "ModuleVersion = '$newVersion'"
              Set-Content $psd1Path -Value $newContent
              Write-Host "Updated version to: $newVersion"
              echo "new_version=$newVersion" | Out-File -FilePath $env:GITHUB_ENV -Append
          } else {
              Write-Host "Could not find version in .psd1 file."
              exit 1
          }
      - name: Update CHANGELOG.md
        shell: pwsh
        run: |
          & ./scripts/Update-ReleaseChangeLog.ps1 -Version "${{ env.new_version }}"
      - name: Commit Version and Changelog
        shell: bash
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add ./BridgeWatcher/BridgeWatcher.psd1 CHANGELOG.md
          git commit -m "Bump version to ${{ env.new_version }} and update CHANGELOG.md" || echo "No changes to commit"
      - name: Pull and rebase before push
        run: git pull --rebase origin main
      - name: Push changes
        run: git push origin main
      - name: Create Tag
        run: |
          TAG_NAME="v${{ env.new_version }}"
          git tag $TAG_NAME
          git push origin $TAG_NAME
      - name: Extract release notes from CHANGELOG.md
        id: changelog_notes
        shell: pwsh
        run: |
          $notes = & ./scripts/Get-ReleaseNotes.ps1 -Version "v${{ env.new_version }}"
          echo "release_notes<<EOF" >> $env:GITHUB_ENV
          echo "$notes" >> $env:GITHUB_ENV
          echo "EOF" >> $env:GITHUB_ENV
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ env.new_version }}"
          body: ${{ env.release_notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ env.release_notes }}
          tag_name: "v${{ env.new_version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish Module
        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        shell: pwsh
        env:
          PSGalleryApiKey: ${{ secrets.PSGalleryApiKey }}
        run: |
          if (!$env:PSGalleryApiKey) {
            Write-Error "PSGalleryApiKey is not set. Ensure it is added as a GitHub Secret."
            exit 1
          }
          if (-Not (Test-Path -Path ./BridgeWatcher)) {
            Write-Error "Module path ./BridgeWatcher does not exist. Check the workflow configuration."
            exit 1
          }
          try {
            Publish-Module -Path ./BridgeWatcher -Repository PSGallery -NuGetApiKey $env:PSGalleryApiKey -Verbose
          } catch {
            Write-Error "Failed to publish the module: $_"
            exit 1
          }
