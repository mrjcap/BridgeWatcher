name: PowerShell Module Publish

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - uses: actions/checkout@v3

      # Install Pester for testing
      - name: Install Pester
        shell: pwsh
        run: Install-Module Pester -Force -Scope CurrentUser
          
      # Run Pester Tests
      - name: Run Tests
        shell: pwsh
        run: |
          $res = Invoke-Pester -Configuration (Import-PowerShellDataFile .\Tests\PesterConfiguration.psd1) -Verbose
          if ($res.FailedCount -gt 0) { exit 1 }
       # Bump the version automatically
      - name: Bump Version
        shell: pwsh
        id: version_bump  # Αποθήκευση του output για χρήση αργότερα
        run: |
          # Get the current version from the .psd1 file
          $psd1Path = './BridgeWatcher/BridgeWatcher.psd1'
          $content = Get-Content $psd1Path -Raw

          # Extract current version using regex
          if ($content -match "ModuleVersion\s*=\s*'(\d+\.\d+\.\d+)'" ) {
              $currentVersion = $matches[1]
              Write-Host "Current version: $currentVersion"

              # Increment the version number (patch bump)
              $versionParts = $currentVersion -split '\.'
              $versionParts[2] = [int]$versionParts[2] + 1  # Bumping the patch version
              $newVersion = "$($versionParts[0]).$($versionParts[1]).$($versionParts[2])"

              # Update the ModuleVersion in the .psd1 file
              $newContent = $content -replace "ModuleVersion\s*=\s*'$currentVersion'", "ModuleVersion = '$newVersion'"
              Set-Content $psd1Path -Value $newContent
              Write-Host "Updated version to: $newVersion"

              # Set the new version as output for later use
              echo "::set-output name=new_version::$newVersion"  # Αποθήκευση της νέας έκδοσης
          } else {
              Write-Host "Could not find version in .psd1 file."
              exit 1
          }
      # Install Node.js for auto-changelog
      - name: Set up Node.js for auto-changelog
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      # Install auto-changelog
      - name: Install auto-changelog
        run: npm install -g auto-changelog

      # Generate Changelog
      - name: Generate Changelog
        run: auto-changelog --unreleased --output CHANGELOG.md
      # Create a new tag for the release
      - name: Create Tag
        run: |
          TAG_NAME="v${{ steps.version_bump.outputs.new_version }}"  # Χρήση της αυξημένης έκδοσης για το tag
          git tag $TAG_NAME  # Create the tag
          git push origin $TAG_NAME  # Push the tag to the repository

      # Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./CHANGELOG.md
          tag_name: ${{ steps.version_bump.outputs.new_version }}  # Χρήση της αυξημένης έκδοσης για το release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Publish to PowerShell Gallery
      - name: Publish Module
        if: ${{ github.event_name == 'push' }}
        shell: pwsh
        env:
          PSGalleryApiKey: ${{ secrets.PSGalleryApiKey }}
        run: |
          Publish-Module -Path ./BridgeWatcher -Repository PSGallery -NuGetApiKey $env:PSGalleryApiKey -Verbose
