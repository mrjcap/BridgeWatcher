name: PowerShell Module Publish

on:
  workflow_call:
    inputs:
      next_version:
        description: 'The exact version to release'
        required: true
        type: string
jobs:
  publish:
    runs-on: ubuntu-latest
    outputs:
      module_published: ${{ steps.set_output.outputs.published }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up PowerShell
        uses: actions/setup-powershell@v2

      - name: Set Final Module Version
        shell: pwsh
        run: |
          & ./scripts/Set-FinalModuleVersion.ps1 -Version "${{ inputs.next_version }}" -Path ./BridgeWatcher/BridgeWatcher.psd1

      - name: Configure Git User
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit Version and Changelog
        id: commit_step
        run: |
          git add ./BridgeWatcher/BridgeWatcher.psd1 CHANGELOG.md
          if git diff --staged --quiet; then
            echo "No changes to commit."
            echo "committed=false" >> $GITHUB_OUTPUT
          else
            git commit -m "chore: Bump version to ${{ inputs.next_version }} and update changelog"
            echo "committed=true" >> $GITHUB_OUTPUT
          fi

      - name: Push changes
        if: steps.commit_step.outputs.committed == 'true'
        run: git push origin HEAD

      - name: Create Tag
        if: steps.commit_step.outputs.committed == 'true'
        run: |
          TAG_NAME="v${{ inputs.next_version }}"
          git tag $TAG_NAME
          git push origin $TAG_NAME

      - name: Extract Release Notes
        id: changelog_notes
        shell: pwsh
        run: |
          $notes = & ./scripts/Get-ReleaseNotes.ps1 -Version "v${{ inputs.next_version }}"
          echo "release_notes<<EOF" >> $env:GITHUB_OUTPUT
          echo "$notes" >> $env:GITHUB_OUTPUT
          echo "EOF" >> $env:GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.commit_step.outputs.committed == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ inputs.next_version }}"
          name: "Release v${{ inputs.next_version }}"
          body: ${{ steps.changelog_notes.outputs.release_notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Module
        shell: pwsh
        env:
          PSGalleryApiKey: ${{ secrets.PSGALLERYAPIKEY }}
        run: |
          if (!$env:PSGalleryApiKey) {
            Write-Error "PSGalleryApiKey is not set. Ensure it is added as a GitHub Secret."
            exit 1
          }
          if (-Not (Test-Path -Path ./BridgeWatcher)) {
            Write-Error "Module path ./BridgeWatcher does not exist. Check the workflow configuration."
            exit 1
          }
          try {
            Publish-Module -Path ./BridgeWatcher -Repository PSGallery -NuGetApiKey $env:PSGalleryApiKey -Verbose
          } catch {
            Write-Error "Failed to publish the module: $_"
            exit 1
          }

      - name: Set output for orchestrator
        id: set_output
        run: |
          echo "published=true" >> $GITHUB_OUTPUT
