name: PowerShell Module Publish

on:
  workflow_call:
    inputs:
      next_version:
        description: 'The version to publish'
        required: true
        type: string
    outputs:
      module_published:
        description: 'Whether the module was successfully published'
        value: ${{ jobs.publish.outputs.module_published }}

permissions:
  contents: write

jobs:
  publish:
    runs-on: ubuntu-latest
    outputs:
      module_published: ${{ steps.set_output.outputs.published }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Set up PowerShell
        shell: pwsh
        run: |
          Write-Host "PowerShell version: $($PSVersionTable.PSVersion)"
      
      - name: Set final module version
        shell: pwsh
        run: |
          & ./scripts/Set-FinalModuleVersion.ps1 `
            -Version '${{ inputs.next_version }}' `
            -Path './BridgeWatcher/BridgeWatcher.psd1' `
            -Verbose
      
      - name: Configure Git user
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Commit version and changelog updates
        run: |
          git add BridgeWatcher/BridgeWatcher.psd1
          git commit -m "chore: Bump version to ${{ inputs.next_version }}"
      
      - name: Push changes to repository
        run: |
          git pull --rebase origin main
          git push origin HEAD:${{ github.ref_name }}
      
      - name: Extract release notes
        id: release_notes
        shell: pwsh
        run: |
          $notes = & ./scripts/Get-ReleaseNotes.ps1 -Version 'v${{ inputs.next_version }}'
          echo "notes<<EOF" >> $env:GITHUB_OUTPUT
          echo "$notes" >> $env:GITHUB_OUTPUT
          echo "EOF" >> $env:GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ inputs.next_version }}
          name: Release v${{ inputs.next_version }}
          body: ${{ steps.release_notes.outputs.notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish module to PowerShell Gallery
        shell: pwsh
        run: |
          try {
            $publishSplat = @{
              Path = './BridgeWatcher'
              NuGetApiKey = '${{ secrets.PSGALLERYAPIKEY }}'
              Verbose = $true
              ErrorAction = 'Stop'
            }
            Publish-Module @publishSplat
            Write-Host "✅ Module published successfully to PowerShell Gallery"
          } catch {
            Write-Error "❌ Failed to publish module: $_"
            exit 1
          }
      
      - name: Verify module publish
        shell: pwsh
        run: |
          Find-Module -Name BridgeWatcher -Repository PSGallery -ErrorAction Stop

      - name: Cleanup git repository
        run: git gc

      - name: Set job output
        id: set_output
        if: success()
        run: |
          echo "published=true" >> $GITHUB_OUTPUT
      
      - name: Set failure output
        if: failure()
        run: |
          echo "published=false" >> $GITHUB_OUTPUT