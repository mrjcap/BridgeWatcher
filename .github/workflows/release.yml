name: Release Orchestrator

# semgrep:ignore yaml.github-actions.security.curl-eval.curl-eval
on:
  workflow_dispatch:
    inputs:
      version_bump_type:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: patch
      force_release:
        description: 'Force release even if no significant changes detected'
        required: false
        type: boolean
        default: false
      dry_run:
        description: 'Perform a dry run without publishing'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write
  issues: write
  security-events: write

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  pre-release:
    name: Pre-release Validation
    runs-on: ubuntu-latest
    outputs:
      can_proceed: ${{ steps.validation.outputs.can_proceed }}
      validation_summary: ${{ steps.validation.outputs.summary }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0

      - name: Validate release conditions
        id: validation
        shell: bash
        run: |
          echo " Validating release conditions..."

          # Check if there are uncommitted changes
          if ! git diff --quiet; then
            echo " Uncommitted changes detected"
            echo "can_proceed=false" >> $GITHUB_OUTPUT
            echo "summary=Uncommitted changes detected" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Check if we're on main/master branch
          CURRENT_BRANCH=$(git branch --show-current)
          if [[ "$CURRENT_BRANCH" != "main" && "$CURRENT_BRANCH" != "master" ]]; then
            echo " Release must be run from main/master branch (current: $CURRENT_BRANCH)"
            echo "can_proceed=false" >> $GITHUB_OUTPUT
            echo "summary=Not on main branch" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Check for recent commits (unless force_release is true)
          env:
            FORCE_RELEASE: ${{ inputs.force_release }}
          run: |
            if [[ "$FORCE_RELEASE" != "true" ]]; then
              COMMITS_SINCE_LAST_TAG=$(git rev-list --count $(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~10")..HEAD 2>/dev/null || echo "10")
              if [[ "$COMMITS_SINCE_LAST_TAG" -lt "1" ]]; then
                echo " No new commits since last release"
                echo "can_proceed=false" >> $GITHUB_OUTPUT
                echo "summary=No new commits since last release" >> $GITHUB_OUTPUT
                exit 1
              fi
            fi

          echo " Pre-release validation passed"
          echo "can_proceed=true" >> $GITHUB_OUTPUT
          echo "summary=All validations passed" >> $GITHUB_OUTPUT
  ci:
    name: PowerShell CI
    needs: [pre-release]
    if: needs.pre-release.outputs.can_proceed == 'true'
    uses: ./.github/workflows/ci.yml
    secrets: inherit

  gatekeeper:
    name: Release Gatekeeper
    runs-on: ubuntu-latest
    needs: [ci]
    if: always()
    outputs:
      next_version: ${{ steps.determine_version.outputs.version }}
      changelog_updated: ${{ steps.changelog_check.outputs.updated }}
      proceed_with_release: ${{ steps.decide.outputs.proceed }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0

      - name: Calculate next version
        id: determine_version
        shell: pwsh
        env:
          VERSION_BUMP_TYPE: ${{ inputs.version_bump_type }}
        run: |
          Write-Verbose "Calculating next version..."

          if (Test-Path "./scripts/Get-PotentialNextVersion.ps1") {
            try {
              $version = & ./scripts/Get-PotentialNextVersion.ps1 -BumpType $env:VERSION_BUMP_TYPE -Verbose
              Write-Verbose " Calculated version: $version"
              echo "version=$version" >> $env:GITHUB_OUTPUT
            } catch {
              Write-Error " Failed to calculate version: $_"
              exit 1
            }
          } else {
            Write-Error " Get-PotentialNextVersion.ps1 script not found!"
            exit 1
          }

      - name: Update Changelog from commits
        shell: pwsh
        env:
          NEXT_VERSION: ${{ steps.determine_version.outputs.version }}
        run: |
          try {
            Write-Verbose " Updating changelog for version $env:NEXT_VERSION"
            & ./scripts/Update-ReleaseChangeLog.ps1 -Version $env:NEXT_VERSION -Verbose
            Write-Verbose " Changelog update completed"
          } catch {
            Write-Error " Failed to update changelog: $_"
            exit 1
          }

      - name: Check if changelog updated
        id: changelog_check
        shell: pwsh
        run: |
          $updated = (Get-Content ./changelog_updated.flag -Raw).Trim().ToLower()
          "updated=$updated" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Configure Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Commit and Push Changelog
        if: steps.changelog_check.outputs.updated == 'true'
        env:
          NEXT_VERSION: ${{ steps.determine_version.outputs.version }}
        run: |
          git add CHANGELOG.md
          git commit -m "Update changelog for $NEXT_VERSION [skip ci]"
          git push

      - name: Decide whether to proceed
        id: decide
        run: |
          if [[ "${{ steps.changelog_check.outputs.updated }}" == "true" || "${{ inputs.force_release }}" == "true" ]]; then
            echo "proceed=true" >> $GITHUB_OUTPUT
            echo " Proceeding with release"
          else
            echo "proceed=false" >> $GITHUB_OUTPUT
            echo " No significant changes detected, skipping release"
          fi

  security-analysis:
    name: Security Analysis
    needs: [gatekeeper]
    if: always() && needs.gatekeeper.outputs.proceed_with_release == 'true'
    uses: ./.github/workflows/codequality.yml
    secrets: inherit

  docs-generation:
    name: Documentation Generation
    needs: [gatekeeper]
    if: always() && needs.gatekeeper.outputs.proceed_with_release == 'true'
    uses: ./.github/workflows/powershell-docs.yml
    secrets: inherit

  publish-module:
    name: Publish Module
    needs: [gatekeeper, security-analysis, docs-generation, ci]
    if: |
      always() &&
      needs.gatekeeper.outputs.proceed_with_release == 'true' &&
      needs.security-analysis.result == 'success' &&
      needs.ci.result == 'success'
    uses: ./.github/workflows/publish.yml
    with:
      next_version: ${{ needs.gatekeeper.outputs.next_version }}
      dry_run: ${{ inputs.dry_run }}
    secrets: inherit

  docker-build:
    name: Docker Build & Push
    needs: [gatekeeper, publish-module]
    if: |
      always() &&
      needs.gatekeeper.outputs.proceed_with_release == 'true' &&
      (needs.publish-module.outputs.module_published == 'true' || needs.publish-module.outputs.module_published == 'dry-run')
    uses: ./.github/workflows/docker-build.yml
    with:
      version: ${{ needs.gatekeeper.outputs.next_version }}
    secrets: inherit

  release-summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [gatekeeper, publish-module, docker-build]
    if: always()
    steps:
      - name: Generate release summary
        shell: bash
        env:
          VERSION: ${{ needs.gatekeeper.outputs.next_version }}
          VERSION_BUMP: ${{ inputs.version_bump_type }}
          DRY_RUN: ${{ inputs.dry_run }}
          FORCE_RELEASE: ${{ inputs.force_release }}
          GATEKEEPER_RESULT: ${{ needs.gatekeeper.result }}
          PROCEED_WITH_RELEASE: ${{ needs.gatekeeper.outputs.proceed_with_release }}
          MODULE_PUBLISH_RESULT: ${{ needs.publish-module.result }}
          MODULE_PUBLISHED: ${{ needs.publish-module.outputs.module_published }}
          DOCKER_BUILD_RESULT: ${{ needs.docker-build.result }}
        run: |
          echo "#  Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "##  Release Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${VERSION:-N/A}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Bump:** $VERSION_BUMP" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run:** $DRY_RUN" >> $GITHUB_STEP_SUMMARY
          echo "- **Force Release:** $FORCE_RELEASE" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "##  Workflow Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Gatekeeper | $GATEKEEPER_RESULT | $( [ "$PROCEED_WITH_RELEASE" = "true" ] && echo ' Proceed' || echo ' Skip' ) |" >> $GITHUB_STEP_SUMMARY
          echo "| Changelog | auto | Updated by script |" >> $GITHUB_STEP_SUMMARY
          echo "| Module Publish | ${MODULE_PUBLISH_RESULT:-skipped} | ${MODULE_PUBLISHED:-N/A} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${DOCKER_BUILD_RESULT:-skipped} | $( [ "$DOCKER_BUILD_RESULT" = "success" ] && echo ' Built' || echo 'N/A' ) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Determine overall status
          if [[ "$PROCEED_WITH_RELEASE" == "true" && "$MODULE_PUBLISH_RESULT" == "success" ]]; then
            echo "##  Release Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
          else
            echo "##  Release Status: FAILED or SKIPPED" >> $GITHUB_STEP_SUMMARY
          fi
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [release-summary]
    if: always()

    steps:
      - name: Cleanup artifacts
        if: always()
        run: |
          echo " Performing cleanup..."
          rm -rf test-secrets/ || true
          rm -f .env* || true
          rm -f coverage.xml testResults.xml || true
          rm -rf dist/ build/ out/ || true
          docker container prune -f || true
          docker image prune -f || true
          docker system prune -af --volumes || true
          docker logout || true
          git clean -fdx || true
          git reset --hard || true
          echo " Cleanup completed"

