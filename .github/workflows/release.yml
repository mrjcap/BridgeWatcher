name: Release Process

on:
  workflow_dispatch:
    inputs:
      version_bump_type:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: patch

jobs:
  pre-release:
    name: Pre-release Checks
    runs-on: ubuntu-latest
    steps:
      - name: Print start
        run: echo "Ξεκινάει η διαδικασία release..."

  test:
    name: Module Tests
    uses: ./.github/workflows/ci.yml
    secrets: inherit

  gatekeeper:
    name: Gatekeeper & Changelog
    runs-on: ubuntu-latest
    needs: test
    outputs:
      next_version: ${{ steps.determine_version.outputs.version }}
      changelog_updated: ${{ steps.check_changelog.outputs.updated }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up PowerShell
        shell: pwsh
        run: |
          Write-Host "PowerShell version: $($PSVersionTable.PSVersion)"

      - name: Calculate potential next version
        id: determine_version
        shell: pwsh
        run: |
          $version = & ./scripts/Get-PotentialNextVersion.ps1 -BumpType '${{ github.event.inputs.version_bump_type }}' -Verbose
          Write-Host "Calculated version: $version"
          echo "version=$version" >> $env:GITHUB_OUTPUT

      - name: Check commits and update changelog
        id: check_changelog
        shell: pwsh
        run: |
          & ./scripts/Update-ReleaseChangeLog.ps1 -Version '${{ steps.determine_version.outputs.version }}' -Verbose
          if (Test-Path './changelog_updated.flag') {
            $updated = Get-Content './changelog_updated.flag' -Raw
            Write-Host "Changelog updated: $updated"
            echo "updated=$updated" >> $env:GITHUB_OUTPUT
          } else {
            Write-Host "Flag file not found, assuming no update"
            echo "updated=false" >> $env:GITHUB_OUTPUT
          }

      - name: Output gatekeeper decision & commit CHANGELOG.md
        shell: pwsh
        run: |
          if ('${{ steps.check_changelog.outputs.updated }}' -eq 'true') {
            Write-Host "✅ New changes detected. Proceeding with release for version ${{ steps.determine_version.outputs.version }}"
          } else {
            Write-Host "⏸️ No new changes detected or changelog already up-to-date. Skipping release steps."
          }
      - name: Commit & push updated CHANGELOG.md
        if: steps.check_changelog.outputs.updated == 'true'
        shell: pwsh
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "ci: update CHANGELOG.md for v${{ steps.determine_version.outputs.version }}" || echo "No changes to commit"
          $branch = git rev-parse --abbrev-ref HEAD
          git push origin HEAD:$branch

      - name: Cleanup old release artifacts
        run: |
          find . -type f -name '*.tar.gz' -delete
          find . -type f -name '*.zip' -delete
        if: always()

  docs:
    name: Documentation Generation
    needs: gatekeeper
    if: needs.gatekeeper.outputs.changelog_updated == 'true'
    uses: ./.github/workflows/powershell-docs.yml
    secrets: inherit

  publish:
    name: Publish Module
    needs: [gatekeeper, docs]
    if: needs.gatekeeper.outputs.changelog_updated == 'true'
    uses: ./.github/workflows/publish.yml
    with:
      next_version: ${{ needs.gatekeeper.outputs.next_version }}
    secrets: inherit

  docker:
    name: Docker Build & Push
    needs: [gatekeeper, publish]
    if: needs.gatekeeper.outputs.changelog_updated == 'true' && needs.publish.outputs.module_published == 'true'
    uses: ./.github/workflows/docker-build.yml
    with:
      version: ${{ needs.gatekeeper.outputs.next_version }}
    secrets: inherit

  test-matrix:
    name: Multi-OS/Version Tests
    runs-on: ${{ matrix.os }}
    needs: gatekeeper
    if: needs.gatekeeper.outputs.changelog_updated == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        pwsh_version: ["7.3.x", "7.4.x"]
    steps:
      - name: Setup PowerShell ${{ matrix.pwsh_version }}
        uses: actions/setup-powershell@v2
        with:
          pwsh-version: ${{ matrix.pwsh_version }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Pester
        shell: pwsh
        run: Install-Module Pester -Force -Scope CurrentUser

      - name: Run Matrix Tests
        shell: pwsh
        run: |
          if (Test-Path ./Tests/PesterConfiguration.psd1) {
            Invoke-Pester -Configuration (Import-PowerShellDataFile ./Tests/PesterConfiguration.psd1)
          } else {
            Write-Error "PesterConfiguration.psd1 not found!"
            exit 1
          }