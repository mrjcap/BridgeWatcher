name: Release Orchestrator

on:
  workflow_dispatch:
    inputs:
      version_bump_type:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: patch
      force_release:
        description: 'Force release even if no significant changes detected'
        required: false
        type: boolean
        default: false
      dry_run:
        description: 'Perform a dry run without publishing'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write
  issues: write
  security-events: write

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  pre-release:
    name: Pre-release Validation
    runs-on: ubuntu-latest
    outputs:
      can_proceed: ${{ steps.validation.outputs.can_proceed }}
      validation_summary: ${{ steps.validation.outputs.summary }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0

      - name: Validate release conditions
        id: validation
        shell: bash
        run: |
          echo "🔍 Validating release conditions..."

          # Check if there are uncommitted changes
          if ! git diff --quiet; then
            echo "❌ Uncommitted changes detected"
            echo "can_proceed=false" >> $GITHUB_OUTPUT
            echo "summary=Uncommitted changes detected" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Check if we're on main/master branch
          CURRENT_BRANCH=$(git branch --show-current)
          if [[ "$CURRENT_BRANCH" != "main" && "$CURRENT_BRANCH" != "master" ]]; then
            echo "❌ Release must be run from main/master branch (current: $CURRENT_BRANCH)"
            echo "can_proceed=false" >> $GITHUB_OUTPUT
            echo "summary=Not on main branch" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Check for recent commits (unless force_release is true)
          if [[ "${{ inputs.force_release }}" != "true" ]]; then
            COMMITS_SINCE_LAST_TAG=$(git rev-list --count $(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~10")..HEAD 2>/dev/null || echo "10")
            if [[ "$COMMITS_SINCE_LAST_TAG" -lt "1" ]]; then
              echo "⚠️ No new commits since last release"
              echo "can_proceed=false" >> $GITHUB_OUTPUT
              echo "summary=No new commits since last release" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

          echo "✅ Pre-release validation passed"
          echo "can_proceed=true" >> $GITHUB_OUTPUT
          echo "summary=All validations passed" >> $GITHUB_OUTPUT
  ci:
    name: PowerShell CI
    needs: [pre-release]
    if: needs.pre-release.outputs.can_proceed == 'true'
    uses: ./.github/workflows/ci.yml
    secrets: inherit

  gatekeeper:
    name: Release Gatekeeper
    runs-on: ubuntu-latest
    needs: [ci]
    if: always() && needs.gatekeeper.outputs.proceed_with_release == 'true'
    outputs:
      next_version: ${{ steps.determine_version.outputs.version }}
      changelog_updated: ${{ steps.changelog_check.outputs.updated }}
      proceed_with_release: ${{ steps.decide.outputs.proceed }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0

      - name: Calculate next version
        id: determine_version
        shell: pwsh
        run: |
          Write-Host "Calculating next version..." -ForegroundColor Green

          if (Test-Path "./scripts/Get-PotentialNextVersion.ps1") {
            try {
              $version = & ./scripts/Get-PotentialNextVersion.ps1 -BumpType '${{ inputs.version_bump_type }}' -Verbose
              Write-Host "✅ Calculated version: $version" -ForegroundColor Green
              echo "version=$version" >> $env:GITHUB_OUTPUT
            } catch {
              Write-Error "❌ Failed to calculate version: $_"
              exit 1
            }
          } else {
            Write-Error "❌ Get-PotentialNextVersion.ps1 script not found!"
            exit 1
          }

      - name: Update Changelog from commits
        shell: pwsh
        run: |
          ./scripts/Update-ReleaseChangeLog.ps1 -Version ${{ steps.determine_version.outputs.version }} -Verbose

      - name: Check if changelog updated
        id: changelog_check
        shell: pwsh
        run: |
          $updated = (Get-Content ./changelog_updated.flag -Raw).Trim().ToLower()
          "updated=$updated" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Decide whether to proceed
        id: decide
        run: |
          if [[ "${{ steps.changelog_check.outputs.updated }}" == "true" || "${{ inputs.force_release }}" == "true" ]]; then
            echo "proceed=true" >> $GITHUB_OUTPUT
            echo "🚀 Proceeding with release"
          else
            echo "proceed=false" >> $GITHUB_OUTPUT
            echo "⏸️ No significant changes detected, skipping release"
          fi

  security-analysis:
    name: Security Analysis
    needs: [gatekeeper]
    if: always() && needs.gatekeeper.outputs.proceed_with_release == 'true'
    uses: ./.github/workflows/codequality.yml
    secrets: inherit

  docs-generation:
    name: Documentation Generation
    needs: [gatekeeper]
    if: always() && needs.gatekeeper.outputs.proceed_with_release == 'true'
    uses: ./.github/workflows/powershell-docs.yml
    secrets: inherit

  publish-module:
    name: Publish Module
    needs: [gatekeeper, security-analysis, docs-generation, ci]
    if: |
      always() &&
      needs.gatekeeper.outputs.proceed_with_release == 'true' &&
      needs.security-analysis.result == 'success' &&
      needs.ci.result == 'success'
    uses: ./.github/workflows/publish.yml
    with:
      next_version: ${{ needs.gatekeeper.outputs.next_version }}
      dry_run: ${{ inputs.dry_run }}
    secrets: inherit

  docker-build:
    name: Docker Build & Push
    needs: [gatekeeper, publish-module]
    if: |
      always() &&
      needs.gatekeeper.outputs.proceed_with_release == 'true' &&
      (needs.publish-module.outputs.module_published == 'true' || needs.publish-module.outputs.module_published == 'dry-run')
    uses: ./.github/workflows/docker-build.yml
    with:
      version: ${{ needs.gatekeeper.outputs.next_version }}
    secrets: inherit

  release-summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [gatekeeper, publish-module, docker-build]
    if: always()
    steps:
      - name: Generate release summary
        shell: bash
        run: |
          echo "# 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Release Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ needs.gatekeeper.outputs.next_version || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Bump:** ${{ inputs.version_bump_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run:** ${{ inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Force Release:** ${{ inputs.force_release }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 📋 Workflow Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Gatekeeper | ${{ needs.gatekeeper.result }} | ${{ needs.gatekeeper.outputs.proceed_with_release == 'true' && '✅ Proceed' || '⏸️ Skip' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Changelog | auto | Updated by script |" >> $GITHUB_STEP_SUMMARY
          echo "| Module Publish | ${{ needs.publish-module.result || 'skipped' }} | ${{ needs.publish-module.outputs.module_published || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker-build.result || 'skipped' }} | ${{ needs.docker-build.result == 'success' && '✅ Built' || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Determine overall status
          if [[ "${{ needs.gatekeeper.outputs.proceed_with_release }}" == "true" && "${{ needs.publish-module.result }}" == "success" ]]; then
            echo "## ✅ Release Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Release Status: FAILED or SKIPPED" >> $GITHUB_STEP_SUMMARY
          fi
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [release-summary]
    if: always()

    steps:
      - name: Cleanup artifacts
        if: always()
        run: |
          echo "🧹 Performing cleanup..."
          rm -rf test-secrets/ || true
          rm -f .env* || true
          rm -f coverage.xml testResults.xml || true
          rm -rf dist/ build/ out/ || true
          docker container prune -f || true
          docker image prune -f || true
          docker system prune -af --volumes || true
          docker logout || true
          git clean -fdx || true
          git reset --hard || true
          echo "✅ Cleanup completed"