name: PowerShell Module CI

on:
  workflow_call:
    secrets:
      CODECOV_TOKEN:
        required: true

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  test:
    name: Test on ubuntu-latest with PowerShell v7.5.1
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0

      - name: Setup PowerShell
        uses: milliewalky/setup-pwsh@111b66da66b9e4c068052ed1ae34fcbeb9adcf36
        with:
          tag: 'v7.5.1'

      - name: Cache PowerShell modules
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684
        with:
          path: |
            ~/.local/share/powershell/Modules
            ~/Documents/PowerShell/Modules
            ~/Library/PowerShell/Modules
          key: ubuntu-latest-v7.5.1-pwshmodules-${{ hashFiles('**/BridgeWatcher.psd1') }}
          restore-keys: |
            ubuntu-latest-v7.5.1-pwshmodules-

      - name: Install required PowerShell modules
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          $modules = @('Pester', 'PSScriptAnalyzer')
          foreach ($module in $modules) {
            Write-Verbose "Installing $module..."
            Install-Module -Name $module -Force -Scope CurrentUser -ErrorAction Stop
          }

      - name: Run PSScriptAnalyzer
        shell: pwsh
        run: |
          Write-Verbose "Running PSScriptAnalyzer..."
          $analysisResults = Invoke-ScriptAnalyzer -Path . -Recurse -ReportSummary -EnableExit
          if ($analysisResults) {
            $analysisResults | Format-Table -AutoSize
            Write-Error "PSScriptAnalyzer found $($analysisResults.Count) issues!"
            exit 1
          } else {
            Write-Verbose "✅ No PSScriptAnalyzer issues found"
          }

      - name: Validate module manifest
        shell: pwsh
        run: |
          Write-Verbose "Validating module manifest..."
          $manifestPath = Get-ChildItem -Path . -Filter "*.psd1" -Recurse | Where-Object { $_.Directory.Name -notmatch "Tests|\.git" } | Select-Object -First 1
          if (-not $manifestPath) {
            Write-Error "Module manifest (.psd1) not found!"
            exit 1
          }
          try {
            $manifest = Test-ModuleManifest -Path $manifestPath.FullName -ErrorAction Stop
            Write-Verbose "✅ Module manifest is valid"
            Write-Verbose "Module: $($manifest.Name) v$($manifest.Version)"
          } catch {
            Write-Error "Module manifest validation failed: $($_.Exception.Message)"
            exit 1
          }

      - name: Run Pester tests
        shell: pwsh
        run: |
          Write-Verbose "Running Pester tests..."
          if (Test-Path ./Tests/PesterConfiguration.psd1) {
            $config = Import-PowerShellDataFile ./Tests/PesterConfiguration.psd1
            $result = Invoke-Pester -Configuration (Import-PowerShellDataFile .\Tests\PesterConfiguration.psd1)
            if ($result.Result -ne 'Passed') {
              Write-Error "❌ Tests failed! $($result.FailedCount) of $($result.TotalCount) tests failed"
              exit 1
            } else {
              Write-Verbose "✅ All $($result.TotalCount) tests passed"
            }
          } else {
            Write-Error "PesterConfiguration.psd1 not found!"
            exit 1
          }

      - name: Upload test results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        if: always()
        with:
          name: test-results-ubuntu-latest-v7.5.1
          path: |
            testResults.xml
            coverage.xml
          retention-days: 7

      - name: Check coverage file exists
        id: check_coverage
        shell: pwsh
        run: |
          if (Test-Path './coverage.xml') {
            Write-Verbose "✅ Coverage file found"
            echo "coverage_exists=true" >> $env:GITHUB_OUTPUT
          } else {
            Write-Verbose "⚠️ Coverage file not found"
            echo "coverage_exists=false" >> $env:GITHUB_OUTPUT
          }

      - name: Upload coverage to Codecov
        if: success() && steps.check_coverage.outputs.coverage_exists == 'true'
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: unittests
          name: codecov-ubuntu-latest-v7.5.1
          fail_ci_if_error: true
